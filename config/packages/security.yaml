security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    password_hashers:
        Symfony\Component\Security\Core\User\InMemoryUser: 'auto'

    providers:
        users:
            entity:
                class: App\Entity\User
                property: username

        servers:
            memory:
                users:
                    ws: { password: '%env(WS_SERVER_PASSWORD)%', roles: ['ROLE_INTERNAL_MACHINE'] }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        machine:
            anonymous: false
            stateless: true
            pattern: ^/internal
            provider: servers
            http_basic:
                realm: BearIt

        main:
            logout:
                path: /logout
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path:     /
                always_remember_me: true
            custom_authenticators:
                - App\Security\GithubAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: /api/user-from-token, roles: PUBLIC_ACCESS }
        - { path: ^/internal, roles: ROLE_INTERNAL_MACHINE }
        - { path: /login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/profile, roles: ROLE_USER }
